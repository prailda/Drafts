' Модуль тестирования ValidationUtils
Option Explicit

' Глобальные ссылки на основные объекты
Private m_Logger As Object
Private m_ErrorHandler As Object

' Тестовая книга для проверки уникальности имен компонентов
Private m_TestWorkbook As Workbook

Sub TestValidationUtils()
10     On Error GoTo ErrorHandler
20
30     ' Инициализация
40     Set m_Logger = GetLogger()
50     Set m_ErrorHandler = GetErrorHandler()
60
70     m_Logger.Log_Info "Начало тестирования ValidationUtils", "TestValidationUtils"
80
90     ' Создание тестовой книги для проверки компонентов
100    PrepareTestWorkbook
110
120    ' Тестирование функций валидации имен VBA-компонентов
130    TestVBAComponentNameValidation
140
150    ' Тестирование функций валидации путей файлов и каталогов
160    TestFilePathValidation
170
180    ' Тестирование вспомогательных функций
190    TestHelperFunctions
200
210    ' Очистка
220    CleanupTestWorkbook
230
240    m_Logger.Log_Success "Тестирование ValidationUtils успешно завершено", "TestValidationUtils"
250    MsgBox "Тестирование ValidationUtils успешно завершено!", vbInformation, "Тест"
260
270    Exit Sub
280
290 ErrorHandler:
300    m_ErrorHandler.HandleError Err.Number, Err.Description, "TestValidationUtils", Erl, True
310
320    ' Убедимся, что тестовая книга будет закрыта
330    CleanupTestWorkbook
340 End Sub

Private Sub PrepareTestWorkbook()
350    On Error GoTo ErrorHandler
360
370    m_Logger.Log_Info "Подготовка тестовой книги", "PrepareTestWorkbook"
380
390    ' Создание новой тестовой книги
400    Set m_TestWorkbook = Workbooks.Add
410
420    ' Добавление тестового модуля для проверки уникальности имен
430    m_TestWorkbook.VBProject.VBComponents.Add vbext_ct_StdModule
440    m_TestWorkbook.VBProject.VBComponents(1).Name = "TestModule1"
450
460    m_Logger.Log_Info "Тестовая книга подготовлена", "PrepareTestWorkbook"
470
480    Exit Sub
490
500 ErrorHandler:
510    m_ErrorHandler.HandleError Err.Number, Err.Description, "PrepareTestWorkbook", Erl, True
520
530    If Err.Number = 1004 Then
540        m_Logger.Log_Warning "Отсутствует доступ к VBA проекту. Проверьте настройки безопасности.", "PrepareTestWorkbook"
        MsgBox "Для тестирования необходим доступ к VBA проекту. Проверьте настройки безопасности: " & vbCrLf & _
              "Файл -> Параметры -> Центр управления безопасностью -> Параметры макросов -> Доступ к объектной модели VBA", _
              vbExclamation, "Ошибка доступа"
580    End If
590    Resume Next
600 End Sub

Private Sub CleanupTestWorkbook()
610    On Error Resume Next
620
630    If Not m_TestWorkbook Is Nothing Then
640        m_TestWorkbook.Close SaveChanges:=False
650        Set m_TestWorkbook = Nothing
660        m_Logger.Log_Info "Тестовая книга закрыта", "CleanupTestWorkbook"
670    End If
680 End Sub

Private Sub TestVBAComponentNameValidation()
690    On Error GoTo ErrorHandler
700
710    m_Logger.Log_Info "Тестирование функций валидации имен VBA-компонентов", "TestVBAComponentNameValidation"
720
730    ' Тест IsValidVBAComponentName
740
750    ' Проверка корректных имен
760    TestAssert "IsValidVBAComponentName с корректным именем", ValidationUtils.IsValidVBAComponentName("Module1") = True
770    TestAssert "IsValidVBAComponentName с корректным именем с подчеркиванием", ValidationUtils.IsValidVBAComponentName("My_Module") = True
780    TestAssert "IsValidVBAComponentName с корректным именем с цифрами", ValidationUtils.IsValidVBAComponentName("Module123") = True
790
800    ' Проверка некорректных имен
810    TestAssert "IsValidVBAComponentName с пустым именем", ValidationUtils.IsValidVBAComponentName("") = False
820    TestAssert "IsValidVBAComponentName с именем, начинающимся с цифры", ValidationUtils.IsValidVBAComponentName("1Module") = False
830    TestAssert "IsValidVBAComponentName с именем, содержащим пробел", ValidationUtils.IsValidVBAComponentName("My Module") = False
840    TestAssert "IsValidVBAComponentName с именем, содержащим спец. символ", ValidationUtils.IsValidVBAComponentName("Module@1") = False
    TestAssert "IsValidVBAComponentName с именем > 31 символа", _
              ValidationUtils.IsValidVBAComponentName("ThisIsVeryLongModuleNameThatExceedsTheLimit") = False
870    TestAssert "IsValidVBAComponentName с зарезервированным словом", ValidationUtils.IsValidVBAComponentName("Class") = False
880
890    ' Тест CleanVBAComponentName
900
910    ' Проверка очистки имен
920    TestAssert "CleanVBAComponentName с корректным именем", ValidationUtils.CleanVBAComponentName("Module1") = "Module1"
930    TestAssert "CleanVBAComponentName с пробелом", ValidationUtils.CleanVBAComponentName("My Module") = "My_Module"
940    TestAssert "CleanVBAComponentName с началом не с буквы", ValidationUtils.CleanVBAComponentName("1Module") = "m_1Module"
950    TestAssert "CleanVBAComponentName со спец. символами", ValidationUtils.CleanVBAComponentName("Module@#$%") = "Module____"
    TestAssert "CleanVBAComponentName с длинным именем", _
              Len(ValidationUtils.CleanVBAComponentName("ThisIsVeryLongModuleNameThatExceedsTheLimit")) <= 31
980    TestAssert "CleanVBAComponentName с зарезервированным словом", ValidationUtils.CleanVBAComponentName("Class") = "Class_"
990
1000   ' Тест GenerateUniqueVBAComponentName
1010
1020   ' Проверка генерации уникальных имен
1030   Dim uniqueName1 As String
1040   uniqueName1 = ValidationUtils.GenerateUniqueVBAComponentName(m_TestWorkbook, "NewModule")
1050   TestAssert "GenerateUniqueVBAComponentName с неконфликтующим именем", uniqueName1 = "NewModule"
1060
1070   ' Добавим компонент с тем же именем, чтобы проверить разрешение конфликта
1080   m_TestWorkbook.VBProject.VBComponents.Add(vbext_ct_StdModule).Name = uniqueName1
1090
1100   Dim uniqueName2 As String
1110   uniqueName2 = ValidationUtils.GenerateUniqueVBAComponentName(m_TestWorkbook, "NewModule")
1120   TestAssert "GenerateUniqueVBAComponentName с конфликтующим именем", uniqueName2 <> uniqueName1
1130   TestAssert "GenerateUniqueVBAComponentName добавляет суффикс", InStr(uniqueName2, "_") > 0
1140
1150   m_Logger.Log_Success "Тест функций валидации имен VBA-компонентов выполнен успешно", "TestVBAComponentNameValidation"
1160
1170   Exit Sub
1180
1190 ErrorHandler:
1200   m_ErrorHandler.HandleError Err.Number, Err.Description, "TestVBAComponentNameValidation", Erl, True
1210   Resume Next
1220 End Sub

Private Sub TestFilePathValidation()
1230   On Error GoTo ErrorHandler
1240
1250   m_Logger.Log_Info "Тестирование функций валидации путей файлов и каталогов", "TestFilePathValidation"
1260
1270   ' Тест IsValidFilePath
1280
1290   ' Проверка корректных путей
1300   TestAssert "IsValidFilePath с корректным путем (C:)", ValidationUtils.IsValidFilePath("C:\Temp\file.txt") = True
1310   TestAssert "IsValidFilePath с корректным путем (D:)", ValidationUtils.IsValidFilePath("D:\Documents\report.docx") = True
1320   TestAssert "IsValidFilePath с корректным UNC путем", ValidationUtils.IsValidFilePath("\\Server\Share\file.txt") = True
1330
1340   ' Проверка некорректных путей
1350   TestAssert "IsValidFilePath с пустым путем", ValidationUtils.IsValidFilePath("") = False
1360   TestAssert "IsValidFilePath с неверным диском", ValidationUtils.IsValidFilePath("Z:file.txt") = False
1370   TestAssert "IsValidFilePath с недопустимыми символами", ValidationUtils.IsValidFilePath("C:\Temp\file?.txt") = False
1380
1390   ' Тест IsValidDirectoryPath
1400
1410   ' Проверка корректных путей к каталогам
1420   TestAssert "IsValidDirectoryPath с корректным путем", ValidationUtils.IsValidDirectoryPath("C:\Temp\") = True
1430   TestAssert "IsValidDirectoryPath с корректным путем без слеша", ValidationUtils.IsValidDirectoryPath("C:\Temp") = True
1440   TestAssert "IsValidDirectoryPath с корректным UNC путем", ValidationUtils.IsValidDirectoryPath("\\Server\Share\") = True
1450
1460   ' Проверка некорректных путей к каталогам
1470   TestAssert "IsValidDirectoryPath с пустым путем", ValidationUtils.IsValidDirectoryPath("") = False
1480   TestAssert "IsValidDirectoryPath с неверным диском", ValidationUtils.IsValidDirectoryPath("Z:folder") = False
1490   TestAssert "IsValidDirectoryPath с недопустимыми символами", ValidationUtils.IsValidDirectoryPath("C:\Temp\folder*") = False
1500
1510   ' Тест CleanFilePath
1520
1530   ' Проверка очистки путей
1540   TestAssert "CleanFilePath с корректным путем", ValidationUtils.CleanFilePath("C:\Temp\file.txt") = "C:\Temp\file.txt"
1550   TestAssert "CleanFilePath с недопустимыми символами", ValidationUtils.CleanFilePath("C:\Temp\file?.txt") = "C:\Temp\file_.txt"
   TestAssert "CleanFilePath с множеством недопустимых символов", _
             ValidationUtils.CleanFilePath("C:\Temp\file*<>?|.txt") = "C:\Temp\file_____.txt"
1580
1590   m_Logger.Log_Success "Тест функций валидации путей файлов и каталогов выполнен успешно", "TestFilePathValidation"
1600
1610   Exit Sub
1620
1630 ErrorHandler:
1640   m_ErrorHandler.HandleError Err.Number, Err.Description, "TestFilePathValidation", Erl, True
1650   Resume Next
1660 End Sub

Private Sub TestHelperFunctions()
1670   On Error GoTo ErrorHandler
1680
1690   m_Logger.Log_Info "Тестирование вспомогательных функций", "TestHelperFunctions"
1700
1710   ' Тест IsLetter
1720   TestAssert "IsLetter с буквой (заглавной)", ValidationUtils.IsLetter("A") = True
1730   TestAssert "IsLetter с буквой (строчной)", ValidationUtils.IsLetter("z") = True
1740   TestAssert "IsLetter с цифрой", ValidationUtils.IsLetter("5") = False
1750   TestAssert "IsLetter со специальным символом", ValidationUtils.IsLetter("@") = False
1760   TestAssert "IsLetter с несколькими символами", ValidationUtils.IsLetter("AB") = False
1770
1780   ' Тест IsDigit
1790   TestAssert "IsDigit с цифрой", ValidationUtils.IsDigit("7") = True
1800   TestAssert "IsDigit с буквой", ValidationUtils.IsDigit("A") = False
1810   TestAssert "IsDigit со специальным символом", ValidationUtils.IsDigit("#") = False
1820   TestAssert "IsDigit с несколькими символами", ValidationUtils.IsDigit("123") = False
1830
1840   ' Тест IsVBAReservedWord
1850   TestAssert "IsVBAReservedWord с зарезервированным словом", ValidationUtils.IsVBAReservedWord("Class") = True
1860   TestAssert "IsVBAReservedWord с зарезервированным словом (другой регистр)", ValidationUtils.IsVBAReservedWord("class") = True
1870   TestAssert "IsVBAReservedWord с обычным словом", ValidationUtils.IsVBAReservedWord("MyClass") = False
1880
1890   ' Тест GetFileName
1900   TestAssert "GetFileName с полным путем", ValidationUtils.GetFileName("C:\Temp\file.txt") = "file.txt"
1910   TestAssert "GetFileName с только именем", ValidationUtils.GetFileName("file.txt") = "file.txt"
1920   TestAssert "GetFileName с UNC путем", ValidationUtils.GetFileName("\\Server\Share\file.txt") = "file.txt"
1930
1940   ' Тест GetDirectoryPath
1950   TestAssert "GetDirectoryPath с полным путем", ValidationUtils.GetDirectoryPath("C:\Temp\file.txt") = "C:\Temp\"
1960   TestAssert "GetDirectoryPath с только именем", ValidationUtils.GetDirectoryPath("file.txt") = ""
1970   TestAssert "GetDirectoryPath с UNC путем", ValidationUtils.GetDirectoryPath("\\Server\Share\file.txt") = "\\Server\Share\"
1980
1990   m_Logger.Log_Success "Тест вспомогательных функций выполнен успешно", "TestHelperFunctions"
2000
2010   Exit Sub
2020
2030 ErrorHandler:
2040   m_ErrorHandler.HandleError Err.Number, Err.Description, "TestHelperFunctions", Erl, True
2050   Resume Next
2060 End Sub

Private Sub TestAssert(ByVal TestName As String, ByVal Condition As Boolean)
2070   On Error Resume Next
2080
2090   If Condition Then
2100       m_Logger.Log_Debug "ПРОЙДЕН: " & TestName, "TestAssert"
2110   Else
2120       m_Logger.Log_Error "НЕ ПРОЙДЕН: " & TestName, "TestAssert"
2130       Debug.Print "ТЕСТ НЕ ПРОЙДЕН: " & TestName
2140   End If
2150 End Sub

