#СОЗДАНИЕ КОМПОНЕНТОВ VB

1. СОЗДАНИЕ ЕДИНИЧНЫХ ЭКЗЕМПЛЯРОВ
Каждый VB компонент может быть создан как единичный конкретный экземпляр в целевой книге.
Ожидается, что пользователь выберет книгу одним из доступных способов (ListBox с открытыми книгами, ListView - таблица с разными книгами, TreeView со структурой VBA Projects) и использует Control создания компонента. Пользователь может указать конкретный тип компонента, имя и добавить описание, которое автоматически добавится в начало компонента при создании.

2. СОЗДАНИЕ МНОЖЕСТВА ОДИНАКОВЫХ ЭКЗЕМПЛЯРОВ
Каждый VB компонент может быть создан как группа идентичных экземпляров в целевой книге.
Пользователь может указать в специальном поле количество необходимых компонентов и получить несколько одинаковых модулей, классов, форм или документов.
Данный способ исключает использование пользовательского имени и указание разных типов компонентов, но позволяет быстро сгенерировать любое количество объектов одного типа.

3. СОЗДАНИЕ МНОЖЕСТВА РАЗЛИЧНЫХ ЭКЗЕМПЛЯРОВ
Все VB компоненты могут быть созданы альтернативным путем с использованием таблицы на листе.
Пользователь может добавить с помощью встроенного функционала шаблон таблицы на новом листе, где сразу приготовлены нужные столбцы "VB Component" | "Имя компонента" | "Описание".
Данный сценарий не вносит ограничения в процесс создания различных типов компонентов с уникальными именами и позволяет быстро создавать любые структуры VBA.

4. ПАРАМЕТРЫ:
Целевые книги - могут быть выбраны любым доступным способом.
Типы компонентов - указываются в специальных Controls.
Имена и Описание - задаются с помощью специальных полей для ввода имени или с помощью InputBox
Количество - опционально указывается в специальных Controls.

5. ДОПОЛНИТЕЛЬНО:
 - Каждый процесс создания компонента должен отвечать требованиям безопасности (валидация, логирование и полная обработка ошибок).
 - При получении ошибок "Объект с таким именем уже существует", программа предлагает пользователю добавить суффикс или пропустить этот объект.
 - При получении ошибок "Имя некорректно", программа предлагает пользователю удалить все невалидные символы автоматически или заново указать имя.
 - При получении ошибок при работе с шаблоном таблицы на новом листе могут возникнуть исключения: лист уже существует, таблица уже существует. Программа очищает содержимое таблицы на листе (если она есть) или добавляет новую (если ее нет), после чего использует как шаблон. Ожидается, что специфическое имя шаблонов не занято.
 - При добавлении компонентов без указания имени программа избегает конфликт базовых имен с помощью индексов.


#КОПИРОВАНИЕ И ПЕРЕМЕЩЕНИЕ КОМПОНЕНТОВ VB

1. СОЗДАНИЕ КОПИИ КОМПОНЕНТОВ
Выбранные с помощью чек-боксов компоненты могут быть скопированы из разных книг в одну целевую книгу.
Программа при этом позволяет указать опцию "Изменить имя", чтобы пользователь мог скорректировать копируемые компоненты. Если пользователь копирует много объектов сразу и хочет изменить им имена, программа создает новый лист с таблицей с двумя столбцами "Текущее имя" | "Новое имя". Пользователь может указать новые имена компонентов в таблице и подтвердить, после чего программа продолжит процесс копирования с учетом новых имен объектов.
Помимо объектов внутри рабочих книг программа может копировать отдельные экспортированные компоненты.


2. ПЕРЕНОС КОМПОНЕНТОВ МЕЖДУ КНИГАМИ
Выбранные с помощью чек-боксов компоненты могут быть перенесены из разных книг в одну целевую книгу, либо из одной в разные.
Программа при этом позволяет указать опцию "Изменить имя", чтобы пользователь мог скорректировать копируемые компоненты. Если пользователь переносит много объектов сразу и хочет изменить им имена, программа создает новый лист с таблицей с двумя столбцами "Текущее имя" | "Новое имя". Пользователь может указать новые имена компонентов в таблице и подтвердить, после чего программа продолжит процесс переноса с учетом новых имен объектов.
Программа предлагает на выбор пользователю несколько шаблонов переноса, которые могут быть выбраны для удобства:
 - Перенос всех компонентов в разные книги (один компонент - одна книга)
 - Перенос выбранных компонентов в одну книгу (разные исходные книги - одна целевая)
 - Перенос выбранных компонентов в специальную книгу - хранилище (разные компоненты из любых книг - одна общая специальная книга)
 - Перенос компонентов в специализированные книги на основе тэгов (сортировка)
 - Перенос из всех выбранных книг всех компонентов в текущую книгу.

3. ДОПОЛНИТЕЛЬНО:
 - Каждый процесс создания компонента должен отвечать требованиям безопасности (валидация, логирование и полная обработка ошибок).
 - При получении ошибок "Объект с таким именем уже существует", программа предлагает пользователю добавить суффикс или пропустить этот объект.
 - При получении ошибок "Имя некорректно", программа предлагает пользователю удалить все невалидные символы автоматически или заново указать имя.
 - При получении ошибок "Файл недоступен", программа предлагает пользователю пропустить файл и логирует путь к нему.
 - При получении ошибок "Каталог недоступен", программа предлагает пользователю пропустить файл и логирует путь к нему.
 - Оба процесса позволяют работать с любыми книгами (в том числе с закрытыми). Закрытые книги при этом не открываются.

#СМЕНА ИМЕНИ И УДАЛЕНИЕ КОМПОНЕНТОВ VB

1. СМЕНА ИМЕНИ ПРОЕКТОВ
Выбранные с помощью чек-боксов компоненты могут быт переименованы в соответствии с выбором пользователя. Программа создает новый лист с таблицей с двумя столбцами "Текущее имя" | "Новое имя". Пользователь может указать новые имена компонентов в таблице и подтвердить, после чего программа изменит имя всех выбранных компонентов.
Также, любой единичный экземпляр компонентов может быть при необходимости переименован с помощью вызова InputBox.

2. УДАЛЕНИЕ ПРОЕКТОВ
Выбранные с помощью чек-боксов компоненты могут быть удалены после подтверждения пользователем. 
Для подтверждения пользователь должен ввести в окно InputBox слово "Удалить", после чего программа проведет удаление выбранных компонентов.

3. ДОПОЛНИТЕЛЬНО:
 - Каждый процесс переименования или удаления должен отвечать требованиям безопасности (валидация, логирование и полная обработка ошибок).
 - При получении ошибок "Объект с таким именем уже существует", программа предлагает пользователю добавить суффикс или пропустить этот объект.
 - При получении ошибок "Имя некорректно", программа предлагает пользователю удалить все невалидные символы автоматически или заново указать имя.
 - При получении ошибок "Объект не существует", программа предлагает пользователю пропустить объект с ошибкой и логирует его.
 - При получении ошибок "Объект не доступен", программа предлагает пользователю пропустить объект с ошибкой и логирует его.


#ЭКСПОРТ И ИМПОРТ КОМПОНЕНТОВ VB

1. ЭКСПОРТ ПРОЕКТОВ
Выбранные с помощью чек-боксов компоненты могут быть экспортированы одним из доступных способов экспорта в зависимости от выбора пользователя.
    - Каждый компонент VBA экспортируется в отдельный файл с расширением .bas, .cls, .frm в указанный каталог с использованием тэгов внутри файла.
    - Каждый компонент VBA экспортируется в отдельный файл с расширением .txt в указанный каталог с использованием тэгов внутри файла (Имя файла - книга и имя компонента).
    - Каждый компонент VBA экспортируется в общий файл с расширением .txt в указанный каталог с использованием тэгов внутри файла (Имя файла - книга и суффикс "Экспорт Модулей + Дата").
    - Каждый компонент VBA экспортируется на отдельный новый лист в текущей книге с использованием тэгов на листе (Имя листа - тип компонента + имя компонента).
    - Каждый компонент VBA экспортируется на общий новый лист в текущей книге с использованием тэгов на листе (Имя листа - "Экспорт Модулей + Дата").
    - Каждый компонент VBA экспортируется на отдельный новый лист в новой книге с использованием тэгов на листе (Имя файла - "Экспорт Модулей + Дата", имя листа - Имя компонента).
    - Каждый компонент VBA экспортируется на общий новый лист в новой книге с использованием тэгов на листе (Имя файла - "Экспорт Модулей + Дата", имя листа - "Экспорт Модулей + Дата").
    Сохранение происходит в указанный каталог с помощью диалогового окна или с использованием пути, указанного пользователем в параметрах.
    Каждый процесс экспорта логируется в отдельный файл специального журнала учета VBA.

2. ИМПОРТ ПРОЕКТОВ
Выбранные с помощью диалогового окна или указанные напрямую с помощью ссылки компоненты могут быть импортированы в текущую книгу.
    - Любой компонент VBA (.bas, .cls, .frm) может быть импортирован в текущую книгу с использованием диалогового окна.
    - Любой компонент VBA (.bas, .cls, .frm) может быть импортирован в текущую книгу с использованием пути, указанного пользователем в параметрах.
    - Любой компонент VBA (.txt) может быть импортирован в текущую книгу с использованием диалогового окна.
    - Любой компонент VBA (.txt) может быть импортирован в текущую книгу с использованием пути, указанного пользователем в параметрах.
    - Любой компонент VBA (.txt) может быть извлечен из общего файла и добавлен в текущую книгу как отдельный компонент.
    - Любой компонент VBA (содержимое листа) может быть извлечен из общего листа и добавлен в текущую книгу как отдельный компонент.
    - Любой компонент VBA (содержимое листа) может быть извлечен и добавлен в текущую книгу как отдельный компонент.
    Определение типа компонента происходит автоматически по расширению файла или по тэгам внутри файла.
    Каждый процесс импорта логируется в отдельный файл специального журнала учета VBA.

3. ДОПОЛНИТЕЛЬНО:
    - Каждый процесс экспорта или импорта должен отвечать требованиям безопасности (валидация, логирование и полная обработка ошибок).
    - При получении ошибок "Файл недоступен", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не существует", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Каталог не существует", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Каталог недоступен", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не является компонентом VBA", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Лист не существует", программа предлагает пользователю пропустить лист и логирует его.
    - При получении ошибок "Файл пуст", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл поврежден", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Недостаточно прав для доступа к файлу", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Недостаточно прав для доступа к каталогу", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не может быть открыт", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не может быть прочитан", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не может быть записан", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок "Файл не может быть закрыт", программа предлагает пользователю пропустить файл и логирует путь к нему.
    - При получении ошибок кодировки файла, программа предлагает пользователю выбрать другую кодировку.
    - При получении ошибок "Имя некорректно", программа предлагает пользователю удалить все невалидные символы автоматически или заново указать имя.
    - При получении ошибок "Объект с таким именем уже существует", программа предлагает пользователю добавить суффикс или пропустить этот объект.


#СОЗДАНИЕ ОТЧЕТОВ ПО КОМПОНЕНТАМ VB

1. ОТЧЕТ ПО КОМПОНЕНТАМ
Пользователь может создать отчет по всем компонентам в текущей книге, включая все модули, классы, формы и документы.
    - Отчет о компонентах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов и содержит следующие столбцы: 
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Дата создания" | "Дата изменения" | "Количество программ".
        Программа парсит все компоненты в книге и формирует массив 7 на N, после чего создает отчет на новом листе и вставляет массив в виде таблицы.
    
    - Отчет о содержимом компонентов текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов с детализацией на отдельные программы и содержит следующие столбцы:
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы".

    - Отчет о переменных и процедурах в компонентах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов с детализацией на отдельные программы и содержит следующие столбцы:
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы" | "Тип переменной" | "Имя переменной" | "Вызовы".

    - Отчет о вызовах процедур в компонентах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов с детализацией на отдельные программы и содержит следующие столбцы:
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы" | "Вызовы (CallStack)".
    
    - Отчет со простым списком всех компонентов в текущей книге или выбранных книг. 
        Отчет состоит из таблицы на новом листе и содержит следующие столбцы: "Тип компонента" | "Имя компонента"

    - Отчет о содержимом всех компонентов в текущей книге или выбранных книг. 
        Отчет состоит из таблицы на новом листе и содержит следующие столбцы: "Тип компонента" | "Имя компонента" | "Текст программы".

    - Отчет об использованной памяти в текущей книге или выбранных книг. 
        Отчет состоит из замера памяти и вывода в окно сообщения с последующим логированием.

    - Отчет об использовании переменных в текущей книге или выбранных книг. 
        Отчет состоит из таблицы на новом листе и содержит следующие столбцы: "Тип компонента" | "Имя компонента" | "Имя переменной" | "Тип переменной" | "Использование переменной".

2. ОТЧЕТ ПО ПРОЦЕДУРАМ
Пользователь может создать отчет по всем процедурам в текущей книге, включая все модули, классы, формы и документы.
    - Отчет о процедурах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов и содержит следующие столбцы: 
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы" | "Дата создания" | "Дата изменения" | "Количество процедур".
        Программа парсит все компоненты в книге и формирует массив 9 на N, после чего создает отчет на новом листе и вставляет массив в виде таблицы.

    - Отчет о переменных и процедурах в процедурах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов с детализацией на отдельные программы и содержит следующие столбцы:
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы" | "Тип переменной" | "Имя переменной" | "Вызовы".

    - Отчет о вызовах процедур в процедурах текущей книги или выбранных книг. 
        Отчет состоит из таблицы на новом листе с разделением по типам компонентов с детализацией на отдельные программы и содержит следующие столбцы:
        "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Имя программы" | "Текст программы" | "Вызовы (CallStack)".


3. ДОПОЛНИТЕЛЬНО:
    - Логика построения отчетности универсальна и предусматривает возможность добавления новых типов отчетов или изменение старых. Каждый компонент отчета программа получает независимо. Сначала извлекается список целевых книг, затем для каждой книги извлекается список компонентов, затем для каждого компонента извлекается каждый срез данных. После этого программа формирует отчет на новом листе и вставляет массив в виде таблицы. Для хранения данных программа использует массивы и словари.
    - Каждый процесс создания отчета должен отвечать требованиям безопасности (валидация, логирование и полная обработка ошибок).
    - Каждый процесс создания отчета должен быть максимально оптимизирован и не нагружать систему.


#СОЗДАНИЕ ДРЕВОВИДНОЙ СТРУКТУРЫ КОМПОНЕНТОВ VB

1. СОЗДАНИЕ ДРЕВОВИДНОЙ СТРУКТУРЫ
Основная форма использует окно с древовидной структурой (TreeView) как один из основных способов представления информации.
    - Древовидная структура создается на основе всех доступных книг в пользовательском реестре и их компонентов (по умолчанию отображает только открытые книги, но поддерживает быструю смену параметров).
    - Древовидная структура использует книги как корневые узлы, а компоненты как дочерние узлы.
    - Древовидная структура поддерживает быстрый поиск компонентов по имени и типу.
    - Древовидная структура поддерживает быстрое создание отчетов по компонентам и процедурам.
    - Древовидная структура поддерживает быстрое создание отчетов по переменным и вызовам.
    - Древовидная структура поддерживает быстрое создание отчетов по использованию памяти.
    - Древовидная структура поддерживает быстрое создание отчетов по использованию переменных.
    - Древовидная структура поддерживает использование книг как целевых книг для выполнения программ управления компонентами.
    - Древовидная структура поддерживает быстрое создание компонентов и их копирование.
    - Древовидная структура поддерживает быстрое переименование и удаление компонентов.
    - Древовидная структура поддерживает быстрое экспортирование и импортирование компонентов.
    Выбор объектов осуществляется с помощью чек-боксов. Пользователь может выбрать несколько объектов одновременно и применить к ним действия, которые вызывают Controls. Пользователь может выбрать один объект и просмотреть его содержимое, а также создать отчет по нему.
    Древовидная структура обновляется при каждом изменении в книгах и компонентах.

2. СОБЫТИЕ ДРЕВОВИДНОЙ СТРУКТУРЫ
    - При изменении выбора с помощью чек-боксов любых объектов в древовидной структуре, программа обновляет коллекции связанных объектов: выбранные книги - коллекция SelectedWorkbooksCollection, выбранные компоненты - коллекция SelectedComponentsCollection. Таким образом любое действие, выполняемое с пользовательской формы сразу же получает актуальные данные.
    - При двойном клике на любой компонент в древовидной структуре программа открывает окно с содержимым компонента.
    - При двойном клике на любую книгу в древовидной структуре программа открывает книгу.
    - При нажатии на ПКМ на любой компонент в древовидной структуре программа открывает контекстное меню с действиями: "Создать отчет", "Создать копию", "Переименовать", "Удалить", "Экспортировать", "Импортировать".
    - При нажатии на ПКМ на любую книгу в древовидной структуре программа открывает контекстное меню с действиями: "Открыть", "Экспортировать все компоненты", "Импортировать выбранные компоненты".

3. ДОПОЛНИТЕЛЬНО:
    - Древовидная структура должна быть максимально оптимизирована и не нагружать систему.
    - Древовидная структура должна быть максимально удобной и интуитивно понятной для пользователя.
    - Древовидная структура должна быть максимально гибкой и поддерживать любые действия с компонентами и книгами.
    - Древовидная структура должна быть максимально информативной и содержать все необходимые данные о компонентах и книгах.
    - Древовидная структура должна быть максимально функциональной и поддерживать все возможные действия с компонентами и книгами.
    - Древовидная структура должна быть максимально быстрой и отзывчивой на любые действия пользователя.
    - Древовидная структура должна быть максимально универсальной и поддерживать любые типы компонентов и книг.
    - Древовидная структура должна быть максимально безопасной и защищенной от ошибок и атак.


#СОЗДАНИЕ РЕЕСТРА КОМПОНЕНТОВ VBA

1. СОЗДАНИЕ РЕЕСТРА КОМПОНЕНТОВ
Программа создает реестр всех доступных книг xlsm, xlsb и их компонентов, который используется для построения расширенной древовидной структуры.
    - Реестр создается на основе всех доступных книг xlsm, xlsb и других типов книг с макросами. 
    - Программа реагирует на закрытие, сохранение и открытие книг с макросами и получает ее компоненты, которые заносит в реестр вместе с ссылкой на путь к книге.
    - Реестр содержит информацию о каждой книге и каждом компоненте: "Имя книги" | "Тип компонента" | "Имя компонента" | "Описание компонента" | "Дата создания" | "Дата изменения" | "Количество программ".
    - Реестр обновляется при каждом открытии новой книги с макросами или открытии / закрытии книги с макросами из реестра.
    - Реестр принудительно обновляется при запросе пользователя (например, актуализация данных или сбор информации обо всех книгах с макросами на ПК).
    - Реестр используется для построения расширенной древовидной структуры и учета всех компонентов кода на ПК.

2. ПАРСИНГ КОМПОНЕНТОВ НА ОСНОВЕ РЕЕСТРА
Программа обращается к реестру и получает информацию о всех актуальных ссылках на книги и компоненты. Актуальные объекты в виде прямых ссылок формируются в коллекцию и программа получает таблицу актуальных VB Компонентов.
    - Пользователь может выбирать из таблицы компоненты и в режиме реального времени без открытия книг или файлов VBA просматривать их содержимое.
    - Пользователь может выбирать из таблицы компоненты и в режиме реального времени без открытия книг или файлов VBA создавать отчеты, копировать, перемещать, экспортировать или совершать иные операции.
    - Пользователь может запросить у программы создать реестр всех книг с макросами на ПК и получить информацию о всех компонентах в них.
    - Пользователь может запросить у программы создать отчет о всех книгах с макросами на ПК и получить информацию о всех компонентах в них.

3. ДОПОЛНИТЕЛЬНО:
    - Реестр должен быть максимально оптимизирован и не нагружать систему (реагирует только на события или прямые запросы).
    - Реестр должен быть максимально безопасным и защищенным от ошибок и атак.


#МЕНЕДЖМЕНТ КОМПОНЕНТОВ VBA

1. ОРГАНИЗАЦИЯ ПРОЕКТОВ 
#// TODO